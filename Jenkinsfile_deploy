private void loadEnvironmentVariablesFromFile(String path) {
    def file = readFile(path)
    file.split('\n').each { envLine ->
        def (key, value) = envLine.tokenize('=')
        env."${key}" = "${value}"
    }
}
pipeline {
    agent any
    options {
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '14',
            numToKeepStr: ''
        )
    }
    parameters {
        choice choices: ['release', 'testing'], name: 'ENV_TYPE'
        choice choices: ['testing', 'staging', 'production'], name: 'PLAT_ENV'
        string name: 'PLAT_REPLICAS', defaultValue: '1', trim: true
        string name: 'REDIS_REPLICAS', defaultValue: '1', trim: true
        string(name: 'ACCESS_TOKEN', defaultValue: 'gBdVvAaveHzgfNWPyrQAPeAw2q1DiTTul6gHlkqE69y', description: '傳送到內部群組的Line notify token')
        string(name: 'BOSS_ACCESS_TOKEN', defaultValue: 'Ymi4rFjv5MSWjHbFP5wya5QJIdxyXOPXIitNMsRH9nf', description: '傳送到含Boss群組的Line notify token')
    }
    environment {
        gitCredentialsId = 'b1a0e063-e6a0-4219-ba6f-e693bed1c895'
        REGISTRY = 'registry.e-gps.tw'
        BUILDER_NODE = '192.168.110.141'
        PROJECT_KEY = ''
    }
    stages {
        stage('Init') {
            agent { label env.BUILDER_NODE }
            steps {
                script {
                    switch (env.STATUS) {
                        case '測試機':
                            env.PLAT_ENV = 'testing'
                            break
                        case '模擬機':
                            env.PLAT_ENV = 'staging'
                            break
                        case '正式機':
                            env.PLAT_ENV = 'production'
                            break
                    }
                    def issue = jiraGetIssue idOrKey: "${env.ISSUE_KEY}", site: 'JIRA'
                    env.ENV_TYPE = issue.data.fields.issuetype.name
                    loadEnvironmentVariablesFromFile("env/${env.PLAT_ENV}")
                    def tag = env.ENV_TYPE.toLowerCase() == 'release'
                        ? sh(returnStdout: true, script: "git tag --contains | head -1").trim()[1..-1]
                        : env.ISSUE_KEY
                    env.IMAGE_NAME = "${env.REGISTRY}/${env.PROJECT_KEY}/plat5:${tag}"
                }
            }
        }
        stage('Deploy') {
            agent { label env.NODE }
            steps {
                script {
                    dir('build/config') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "refs/tags/${CONFIG_VERSION}"]],
                            doGenerateSubmoduleConfigurations: false,
                            userRemoteConfigs: [[credentialsId: "${env.gitCredentialsId}", url: "ssh://git@192.168.110.142:7999/${env.PROJECT_KEY}/config.git"]]
                        ])
                    }
                    def composefile = env.PLAT_ENV == 'production' ? 'docker-stack.yml' : 'docker-compose.yml'
                    sh "docker stack deploy -c ${composefile} ${env.ENV_TYPE}_${env.PROJECT_KEY}"
                }
            }
        }
        stage('Notify') {
            agent { label env.BUILDER_NODE }
            steps {
                script {
                    def token = env.PLAT_ENV == 'production' ? env.BOSS_ACCESS_TOKEN : env.ACCESS_TOKEN
                    sh "curl -s -X POST \
                        -H 'Authorization: Bearer ${token}' \
                        -F 'message=[${env.PROJECT_NAME}] ${ISSUE_SUMMARY} \n http://jira.cere.ntnu.edu.tw:8080/browse/${env.ISSUE_KEY} \n 已部署至${env.STATUS} ${env.PLAT_URL}' \
                        https://notify-api.line.me/api/notify"
                }
            }
        }
    }
}
